{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\INSUNG\\\\Documents\\\\dev\\\\react\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  // const [enteredTitle, setEnteredTitle] = useState('');\n  // const [enteredAmount, setEnteredAmount] = useState('');\n  // const [enteredDate, setEnteredDate] = useState('');\n  const [userInput, setUserInput] = useState({\n    enteredTitle: '',\n    enteredAmount: '',\n    enteredDate: ''\n  }); //바닐라 JS처럼 event 발생 시 자동적으로 event 객체 획득\n  //컴포넌트가 재평가될 때에도 특정 값을 저장하고 가져오기 위해서 state사용 가능\n\n  const titleChangeHandler = event => {\n    // setEnteredTitle(event.target.value);\n\n    /*\r\n    setUserInput({\r\n            ...userInput,\r\n            // state들을 객체로 묶었을 때, 한 속성만 변경한다면 기존 state객체에 덮어쓰기가 아닌 현재 해당 state속성만 새로 생성 >> 이전의 amount와 date를 위한 key, value 값을 잃어버림 >> 모든 객체 속성들이 사라지지 않도록 해야함 >> spread 연산자로 가져온 후 변한 state속성만 override\r\n            enteredTitle: event.target.value,\r\n        })\r\n          console.log(event.target.value);\r\n    */\n    setUserInput(prevState => {\n      return { ...prevState,\n        enteredTitle: event.target.value\n      };\n    }); // 이전 state에 의존하는 다수의 state 속성을 가진 state 객체를 관리할 때는 업데이트 함수에 '함수'를 통해 넘겨주는 것이 업데이트된 최신의 state를 안전하게 가져올 수 있다.\n  }; //이 작업은 컴포넌트 자체의 업데이트지만 렌더를 업데이트하기 위한 작업이 아님. state를 활용한 저장기능.\n  //컴포넌트 함수의 생명주기와 독립적인 별개의 전수에 값을 저장하고 로드하기 위함.\n\n\n  const amountChangeHandler = event => {\n    // setEnteredAmount(event.target.value);\n    setUserInput({ ...userInput,\n      enteredAmount: event.target.value\n    });\n    console.log(event.target.value);\n  };\n\n  const dateChangeHandler = event => {\n    // setEnteredDate(event.target.value);\n    setUserInput({ ...userInput,\n      enteredDate: event.target.value\n    });\n    console.log(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__comtrols\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2022-07-04\",\n          max: \"2022-07-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ExpenseForm, \"wmXYPbKtbpwaOPXQRl1cSP80VGk=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","userInput","setUserInput","enteredTitle","enteredAmount","enteredDate","titleChangeHandler","event","prevState","target","value","amountChangeHandler","console","log","dateChangeHandler"],"sources":["C:/Users/INSUNG/Documents/dev/react/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport './ExpenseForm.css';\r\n\r\nconst ExpenseForm = () => {\r\n    // const [enteredTitle, setEnteredTitle] = useState('');\r\n    // const [enteredAmount, setEnteredAmount] = useState('');\r\n    // const [enteredDate, setEnteredDate] = useState('');\r\n    const [userInput, setUserInput] = useState({\r\n        enteredTitle: '',\r\n        enteredAmount: '',\r\n        enteredDate: ''\r\n    });\r\n\r\n    //바닐라 JS처럼 event 발생 시 자동적으로 event 객체 획득\r\n    //컴포넌트가 재평가될 때에도 특정 값을 저장하고 가져오기 위해서 state사용 가능\r\n    const titleChangeHandler = (event) => {\r\n        // setEnteredTitle(event.target.value);\r\n        /*\r\n        setUserInput({\r\n                ...userInput,\r\n                // state들을 객체로 묶었을 때, 한 속성만 변경한다면 기존 state객체에 덮어쓰기가 아닌 현재 해당 state속성만 새로 생성 >> 이전의 amount와 date를 위한 key, value 값을 잃어버림 >> 모든 객체 속성들이 사라지지 않도록 해야함 >> spread 연산자로 가져온 후 변한 state속성만 override\r\n                enteredTitle: event.target.value,\r\n            })\r\n\r\n            console.log(event.target.value);\r\n        */\r\n        setUserInput((prevState) => {\r\n            return {...prevState, enteredTitle: event.target.value};\r\n       });\r\n       // 이전 state에 의존하는 다수의 state 속성을 가진 state 객체를 관리할 때는 업데이트 함수에 '함수'를 통해 넘겨주는 것이 업데이트된 최신의 state를 안전하게 가져올 수 있다.\r\n    }\r\n    //이 작업은 컴포넌트 자체의 업데이트지만 렌더를 업데이트하기 위한 작업이 아님. state를 활용한 저장기능.\r\n    //컴포넌트 함수의 생명주기와 독립적인 별개의 전수에 값을 저장하고 로드하기 위함.\r\n\r\n    const amountChangeHandler = (event) => {\r\n        // setEnteredAmount(event.target.value);\r\n        setUserInput({\r\n            ...userInput,\r\n            enteredAmount: event.target.value,\r\n        })\r\n        console.log(event.target.value);\r\n    }\r\n\r\n    const dateChangeHandler = (event) => {\r\n        // setEnteredDate(event.target.value);\r\n        setUserInput({\r\n            ...userInput,\r\n            enteredDate: event.target.value,\r\n        })\r\n        console.log(event.target.value);\r\n    }\r\n\r\n    return <form>\r\n        <div className='new-expense__comtrols'>\r\n            <div className='new-expense__control'>\r\n                <label>Title</label>\r\n                <input type='text' onChange={titleChangeHandler}></input>\r\n            </div>\r\n            <div className='new-expense__control'>\r\n                <label>Amount</label>\r\n                <input type='number' min='0.01' step='0.01' onChange={amountChangeHandler}></input>\r\n            </div>\r\n            <div className='new-expense__control'>\r\n                <label>Date</label>\r\n                <input type='date' min='2022-07-04' max='2022-07-31' onChange={dateChangeHandler}></input>\r\n            </div>\r\n        </div>\r\n        <div className='new-expense__actions'>\r\n            <button type='submit'>Add Expense</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport default ExpenseForm;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,mBAAP;;;AAEA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACtB;EACA;EACA;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC;IACvCI,YAAY,EAAE,EADyB;IAEvCC,aAAa,EAAE,EAFwB;IAGvCC,WAAW,EAAE;EAH0B,CAAD,CAA1C,CAJsB,CAUtB;EACA;;EACA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;IAClC;;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IAEQL,YAAY,CAAEM,SAAD,IAAe;MACxB,OAAO,EAAC,GAAGA,SAAJ;QAAeL,YAAY,EAAEI,KAAK,CAACE,MAAN,CAAaC;MAA1C,CAAP;IACJ,CAFY,CAAZ,CAXkC,CAcnC;EACF,CAfD,CAZsB,CA4BtB;EACA;;;EAEA,MAAMC,mBAAmB,GAAIJ,KAAD,IAAW;IACnC;IACAL,YAAY,CAAC,EACT,GAAGD,SADM;MAETG,aAAa,EAAEG,KAAK,CAACE,MAAN,CAAaC;IAFnB,CAAD,CAAZ;IAIAE,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACE,MAAN,CAAaC,KAAzB;EACH,CAPD;;EASA,MAAMI,iBAAiB,GAAIP,KAAD,IAAW;IACjC;IACAL,YAAY,CAAC,EACT,GAAGD,SADM;MAETI,WAAW,EAAEE,KAAK,CAACE,MAAN,CAAaC;IAFjB,CAAD,CAAZ;IAIAE,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACE,MAAN,CAAaC,KAAzB;EACH,CAPD;;EASA,oBAAO;IAAA,wBACH;MAAK,SAAS,EAAC,uBAAf;MAAA,wBACI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAO,IAAI,EAAC,MAAZ;UAAmB,QAAQ,EAAEJ;QAA7B;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAKI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAO,IAAI,EAAC,QAAZ;UAAqB,GAAG,EAAC,MAAzB;UAAgC,IAAI,EAAC,MAArC;UAA4C,QAAQ,EAAEK;QAAtD;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QALJ,eASI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAO,IAAI,EAAC,MAAZ;UAAmB,GAAG,EAAC,YAAvB;UAAoC,GAAG,EAAC,YAAxC;UAAqD,QAAQ,EAAEG;QAA/D;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QATJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADG,eAeH;MAAK,SAAS,EAAC,sBAAf;MAAA,uBACI;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAfG;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AAmBH,CApED;;GAAMd,W;;KAAAA,W;AAsEN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}