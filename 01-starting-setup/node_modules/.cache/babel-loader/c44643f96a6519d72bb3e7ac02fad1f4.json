{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\INSUNG\\\\Documents\\\\dev\\\\react\\\\01-starting-setup\\\\src\\\\components\\\\Expenses\\\\ExpenseItem.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ExpenseDate from './ExpenseDate.js';\nimport './ExpenseItem.css';\nimport './ExpenseDate.js';\nimport Card from '../UI/Card.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseItem = props => {\n  _s();\n\n  // const now = new Date();\n  // const year = now.getFullYear();\n  // const month = now.getMonth()+1;\n  // const date = now.getDate();\n  // const korYear = props.date.getFullYear();\n  // const expenseDate = `${year}.${month}.${date}`\n  // const expenseTitle = 'Car Insurance';\n  // const expenseAmount = 30000;\n  // 특별한 변수를 생성하는 것과 유사 >> 컴포넌트 함수가 다시 호출되도록\n  const [title, setTitle] = useState(props.title); //첫 번째 값 - 변수 자체 / 현재 상태의 값 >> title = props.title\n  //두 번쨰 값 - 업데이트 함수 >> 새로운 값을 할당하기 위해 호출할 수 있는 함수\n  //>>> state 변수가 변할 때 컴포넌트 함수를 다시 호출하고 싶으면 업데이트 함수를 호출하면 됨\n  //>>> state 함수가 포함된 컴포넌트를 재평가해야 한다고 알림 >> 컴포넌트 함수와 JSX 재평가\n  //>>> Expenses 컴포넌트에서 ExpenseItem 컴포넌트가 4번 호출 됨 >> 서로 독립적으로 관리되는 state\n  //>>> 컴포넌트의 '인스턴스' 기준으로 state를 독립적으로 관리 및 재평가\n  //const로 지정한 이유 - 최초의 state상태는 컴포넌트 함수 최초 호출 시에만 props.title을 초기화하고 저장\n  //이후 state변수의 변동은 따로 관리되며 title이라는 변수에 직접 할당이 아닌, 리액트가 관리하는 메모리로부터 받아옴\n\n  const clickHandler = () => {\n    setTitle('Updated'); //업데이트 함수 실행 후 바로 값이 변하는 것이 아닌 해당 state변수의 업데이트를 예약\n    //>> 다음 출력에 찍히는 값은 기존의 props.title이 그대로 출력됨\n    //>> 이후 컴포넌트 함수, JSX를 재평가 후 업데이트 된 내용을 렌더함\n\n    console.log(title);\n    console.log('ExpenseItem evaluated by React');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"expense-item\",\n    children: [/*#__PURE__*/_jsxDEV(ExpenseDate, {\n      date: props.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-item__description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-item__price\",\n        children: props.amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clickHandler,\n      children: \"Change Title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpenseItem, \"ceUz0wjPP/oTY3+evv2xH5hljW4=\");\n\n_c = ExpenseItem;\nexport default ExpenseItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseItem\");","map":{"version":3,"names":["React","useState","ExpenseDate","Card","ExpenseItem","props","title","setTitle","clickHandler","console","log","date","amount"],"sources":["C:/Users/INSUNG/Documents/dev/react/01-starting-setup/src/components/Expenses/ExpenseItem.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport ExpenseDate from './ExpenseDate.js';\r\nimport './ExpenseItem.css';\r\nimport './ExpenseDate.js';\r\nimport Card from '../UI/Card.js';\r\n\r\nconst ExpenseItem = (props) => {\r\n\r\n    // const now = new Date();\r\n\r\n    // const year = now.getFullYear();\r\n    // const month = now.getMonth()+1;\r\n    // const date = now.getDate();\r\n\r\n\r\n    // const korYear = props.date.getFullYear();\r\n\r\n    \r\n    // const expenseDate = `${year}.${month}.${date}`\r\n    // const expenseTitle = 'Car Insurance';\r\n    // const expenseAmount = 30000;\r\n\r\n    // 특별한 변수를 생성하는 것과 유사 >> 컴포넌트 함수가 다시 호출되도록\r\n    const [title, setTitle] = useState(props.title);\r\n    //첫 번째 값 - 변수 자체 / 현재 상태의 값 >> title = props.title\r\n    //두 번쨰 값 - 업데이트 함수 >> 새로운 값을 할당하기 위해 호출할 수 있는 함수\r\n    //>>> state 변수가 변할 때 컴포넌트 함수를 다시 호출하고 싶으면 업데이트 함수를 호출하면 됨\r\n    //>>> state 함수가 포함된 컴포넌트를 재평가해야 한다고 알림 >> 컴포넌트 함수와 JSX 재평가\r\n\r\n    //>>> Expenses 컴포넌트에서 ExpenseItem 컴포넌트가 4번 호출 됨 >> 서로 독립적으로 관리되는 state\r\n    //>>> 컴포넌트의 '인스턴스' 기준으로 state를 독립적으로 관리 및 재평가\r\n\r\n    //const로 지정한 이유 - 최초의 state상태는 컴포넌트 함수 최초 호출 시에만 props.title을 초기화하고 저장\r\n    //이후 state변수의 변동은 따로 관리되며 title이라는 변수에 직접 할당이 아닌, 리액트가 관리하는 메모리로부터 받아옴\r\n    const clickHandler = () => {\r\n      setTitle('Updated');\r\n      //업데이트 함수 실행 후 바로 값이 변하는 것이 아닌 해당 state변수의 업데이트를 예약\r\n      //>> 다음 출력에 찍히는 값은 기존의 props.title이 그대로 출력됨\r\n      //>> 이후 컴포넌트 함수, JSX를 재평가 후 업데이트 된 내용을 렌더함\r\n      console.log(title);\r\n      console.log('ExpenseItem evaluated by React');\r\n    }\r\n\r\n\r\n  return (\r\n    <Card className='expense-item'>\r\n      <ExpenseDate date={props.date}/>  \r\n      <div className='expense-item__description'>\r\n        <h2>{title}</h2>\r\n        <div className='expense-item__price'>{props.amount}</div>\r\n      </div>\r\n      <button onClick={clickHandler}>Change Title</button>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAO,mBAAP;AACA,OAAO,kBAAP;AACA,OAAOC,IAAP,MAAiB,eAAjB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAE3B;EAEA;EACA;EACA;EAGA;EAGA;EACA;EACA;EAEA;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAACI,KAAK,CAACC,KAAP,CAAlC,CAjB2B,CAkB3B;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;;EACA,MAAME,YAAY,GAAG,MAAM;IACzBD,QAAQ,CAAC,SAAD,CAAR,CADyB,CAEzB;IACA;IACA;;IACAE,OAAO,CAACC,GAAR,CAAYJ,KAAZ;IACAG,OAAO,CAACC,GAAR,CAAY,gCAAZ;EACD,CAPD;;EAUF,oBACE,QAAC,IAAD;IAAM,SAAS,EAAC,cAAhB;IAAA,wBACE,QAAC,WAAD;MAAa,IAAI,EAAEL,KAAK,CAACM;IAAzB;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAK,SAAS,EAAC,2BAAf;MAAA,wBACE;QAAA,UAAKL;MAAL;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAK,SAAS,EAAC,qBAAf;QAAA,UAAsCD,KAAK,CAACO;MAA5C;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAME;MAAQ,OAAO,EAAEJ,YAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAUD,CAhDD;;GAAMJ,W;;KAAAA,W;AAkDN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}