{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","styles","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","console","log","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/3.4f5cdd18.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1nBz_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__VE5dr\",\"loading\":\"NewCommentForm_loading__1BNCC\",\"control\":\"NewCommentForm_control__2Tj4z\",\"actions\":\"NewCommentForm_actions__xHHm6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2I3sX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2Gn_Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1_N_t\"};","import { useRef, useEffect } from \"react\";\n\nimport styles from \"./NewCommentForm.module.css\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(()=>{\n    if (status === 'completed'){\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n  {/* onAddedComment는 부모 컴포넌트에서 props를 통해 전달\n      - quoteId를 인자로 useHttp를 실행하는 addedCommentHandler 함수\n      - comment 추가와 관련 없이, GET 메서드로 해당 quoteId에 대한 All comments를 받아옴\n      - submit 후, sendRequest의 결과에 따른 status, error에 따라  quoteId의 모든 comments를 받아오는 함수를 재사용함\n        의존성을 현재 컴포넌트의 변수들로 사용하기 위해 props dril */}\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    sendRequest({commentData : { text: enteredText }, quoteId : props.quoteId});\n  };\n\n  return (\n    <form className={styles.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={styles.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={styles.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import styles from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={styles.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport styles from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={styles.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport styles from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api'; \nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const {sendRequest, data: loadedComments, status} = useHttp(getAllComments);\n\n  const { quoteId } = params;\n\n  useEffect(()=>{\n    sendRequest(quoteId)\n  }, [sendRequest, quoteId])\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId)\n  }, [sendRequest, quoteId])\n  {/* 핸들러는 자식 컴포넌트 내 변수를 의존성으로 사용하기 위해 props를 통해 dril\n      >> 핸들러 외부 변수인 quoteId에 따라 sendRequest의 함수가 재생성 됨\n         + 자식 컴포넌트에서 핸들러를 통해 내부의 sendRequest를 실행하면, 그에 따른 리턴(status, data 등)의 변화로\n           Comments 컴포넌트의 재랜더링 >> props drilling으로 전해지는 핸들러 또한 재생성 >> 무한루프\n        >> useCallback을 통해 자식 컴포넌트에서 comment 추가 후 useEffect가 실행되고, 컴포넌트 재랜더링 후 status, error 의존성이 안정화가 이루어 진 후, 의존성으로 등록된 현재 핸들러 또한 같은 sendREquest, quoteId를 가진 클로저?로 넘겨지므로 무한루프 벗어날 수 있음 */}\n\n  let comments;\n\n  if(status === 'pending'){\n    comments = <div className='centered'>\n      <LoadingSpinner />\n    </div>\n  }\n\n  if(status === 'completed' && loadedComments){\n    comments = <CommentsList comments={loadedComments}/>\n  }\n\n  if(status === 'completed' && (!loadedComments || loadedComments.length === 0)){\n    comments = <p className='centered'>No Comments were Added yet!</p>\n  }\n  \n  return (\n    <section className={styles.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler}/>}\n      {/* comment 추가시 이를 렌더링하는 컴포넌트는 Comments.js의 컴포넌트이므로, 이 위치에서 함수 정의 후 props로 드릴 */}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import styles from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={styles.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from \"react\";\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\n\r\nconst QuoteDetail = () => {\r\n  const match = useRouteMatch();\r\n\r\n  console.log(match);\r\n  {/* match 객체에는 params외에 path와 url을 구분한 속성이 존재\r\n      path는 Route를 활용해 정의한 경로, placeholder(:quoteId) */}\r\n\r\n  const params = useParams();\r\n\r\n  const { quoteId } = params;\r\n\r\n  const {sendRequest, status, data:loadedQuote, error } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(()=>{\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId])\r\n\r\n  if(status === 'pending'){\r\n    <div className=\"centered\">\r\n      <LoadingSpinner />\r\n    </div>\r\n  }\r\n\r\n  if(error){\r\n    return <p className=\"centered\">{error}</p>\r\n  }\r\n\r\n  if(!loadedQuote){\r\n    return <p>No Quote Found...</p>\r\n  }\r\n  {/* author와 quote의 본문 내용에 유효성 검증 필요 */}\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        {/* Route의 경로정의 !== Link를 통한 concrete value\r\n            - placeholder가 그대로 존재하는 route 경로로 정의 가능 \r\n            >>> App.js에서 정의된 root Route의 주소가 변경되더라도, nested Route에서 문자열 주소를 변경해줄 필요 없음*/}\r\n        <div className=\"centered\">\r\n          <Link to={`${match.url}/comments`} >\r\n            {/* Link에 할당되는 concrete value는 match의 url을 통해 특정화해서 가져오기 가능 */}\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      {/* <Route path={`/quotes/${params.quoteId}/comments`} > */}\r\n      {/* App.js의 Route에 정의된 /quotes/:quoteId <<에 exact 설정 시 url이 1:1대응에서 어긋나므로 풀어주어야함 */}\r\n      <Route path={`${match.path}/comments`} >\r\n\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}