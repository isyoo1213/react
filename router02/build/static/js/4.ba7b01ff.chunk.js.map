{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","styles","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","when","message","location","onFocus","console","log","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,mB,qBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,2B,2FCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAOC,KAAvB,SAA8BH,EAAMI,UAC5C,E,yBCiEcC,EA9DG,SAACL,GACjB,MAAoCM,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAiBC,mBACjBC,EAAeD,mBA2BrB,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CAAQE,KAAML,EAAYM,QAAS,SAACC,GAAD,MAAY,4EAAZ,IACnC,cAAC,EAAD,UACE,uBACEC,QAXiB,WACvBC,QAAQC,IAAI,qBACZT,GAAc,GACdQ,QAAQC,IAAIV,EACb,EAQON,UAAWC,IAAOgB,KAClBC,SAhCR,SAA2BC,GACzBA,EAAMC,iBAENL,QAAQC,IAAIV,GAEZ,IAAMe,EAAgBb,EAAec,QAAQC,MACvCC,EAAcd,EAAaY,QAAQC,MAIzCxB,EAAM0B,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,GACjD,EAkBK,UAKGzB,EAAM6B,WACL,qBAAK5B,UAAWC,IAAO4B,QAAvB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK9B,UAAWC,IAAO8B,QAAvB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK3B,OAEtC,sBAAKR,UAAWC,IAAO8B,QAAvB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKzB,OAEpC,qBAAKV,UAAWC,IAAOoC,QAAvB,SACE,wBAAQC,QApCY,WAC5BvB,QAAQC,IAAI,mCACZT,GAAc,GACdQ,QAAQC,IAAIV,EACb,EAgCiDN,UAAU,MAAlD,gCAMX,E,gBCvCcuC,UArBE,WACf,MAA8BC,YAAQC,KAA/BC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OAEdC,EAAUC,cAEhBC,qBAAU,WACM,cAAXH,GACDC,EAAQG,KAAK,UAEhB,GAAC,CAACJ,EAAQC,IAOX,OACE,cAAC,EAAD,CAAWhB,UAAsB,YAAXe,EAAsBlB,WALtB,SAACuB,GACvBN,EAAYM,EACb,GAKF,C","file":"static/js/4.ba7b01ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__13kTz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__2XPCZ\",\"loading\":\"QuoteForm_loading__23dvF\",\"control\":\"QuoteForm_control__22w5G\",\"actions\":\"QuoteForm_actions__3ojAi\"};","import styles from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={styles.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport styles from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    console.log(isEntering);\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const finishEnteringHandler = () => {\n    console.log(\"finishEnteringHandler triggered\")\n    setIsEntering(false);\n    console.log(isEntering);\n  }\n\n  const formFocusHandler = () => {\n    console.log(\"Form has Focused!\");\n    setIsEntering(true);\n    console.log(isEntering);\n  };\n\n  return (\n    <Fragment>\n      <Prompt when={isEntering} message={(location)=>'Are you really want to leave the page? All your entered data will be lost!'} />\n      <Card>\n        <form\n          onFocus={formFocusHandler}\n          className={styles.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={styles.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={styles.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={styles.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={styles.actions}>\n            <button onClick={finishEnteringHandler} className=\"btn\">Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport QuoteForm from '../components/quotes/QuoteForm';\r\nimport useHttp from '../hooks/use-http';\r\nimport { addQuote } from '../lib/api';\r\n\r\nconst NewQuote = () => {\r\n  const {sendRequest, status} = useHttp(addQuote);\r\n  {/* 실행하는 것이 아닌 hook으로 선언된 함수들을 가져오는 것 */}\r\n  const history = useHistory();\r\n\r\n  useEffect(()=>{\r\n    if(status === 'completed'){\r\n      history.push('/quotes');\r\n    }\r\n  },[status, history])\r\n  {/* history 객체는 변하지 않을 것이지만 추가해줘야함 */}\r\n\r\n  const addQuoteHandler = (quoteData) => {\r\n    sendRequest(quoteData)\r\n  }\r\n\r\n  return (\r\n    <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler}/>\r\n  )\r\n}\r\n\r\nexport default NewQuote;"],"sourceRoot":""}